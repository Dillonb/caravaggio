
#version 330

//CAUTION: The content of this file is automatically generated by Emacs orgmode
//from the file caravaggio.org that should either be in this, or the parent
//directory. Consequently, any modifications made to this file will likely be
//ephemeral. Please edit caravaggio.org instead.

// Material parameters
uniform vec3 AmbientRho;
uniform vec3 DiffuseRho;
uniform vec3 SpecularRho;
uniform float Shininess;

uniform vec3 EyeDirection;
uniform vec3 AmbientIntensity;
uniform vec3 LightIntensity;
uniform vec3 LightPosition;

in vec3 NormalVector;
in vec4 VertexPosition;

out vec4 fragmentColor;

void main() {
   vec3 lightDirection = normalize(LightPosition - vec3(VertexPosition));

   float diffuse = max(0.0, dot(NormalVector, lightDirection));
   float specular = 0.0;
   if (diffuse > 0.0) {
     //  vec3 halfVector = normalize(lightDirection + EyeDirection);
     //  specular = pow( max(0.0, dot(NormalVector, halfVector)), Shininess);
      vec3 viewDirection = - normalize(vec3(VertexPosition));
      vec3 reflectedDirection = 2*dot(lightDirection, NormalVector)*NormalVector - lightDirection;
      specular = pow( max(0.0, dot(reflectedDirection, viewDirection)), Shininess);
   }

   vec3 scatteredLight = AmbientIntensity * AmbientRho +  LightIntensity * DiffuseRho * diffuse;
   vec3 reflectedLight = LightIntensity * SpecularRho * specular;
   vec3 rgb = min(scatteredLight + reflectedLight , vec3(1.0));
   fragmentColor = vec4(rgb, 1.0);
}
